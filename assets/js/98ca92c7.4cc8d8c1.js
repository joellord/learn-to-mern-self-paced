"use strict";(self.webpackChunkswiftui_realm_app=self.webpackChunkswiftui_realm_app||[]).push([[4400],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>h});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var s=r.createContext({}),u=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},p=function(e){var t=u(e.components);return r.createElement(s.Provider,{value:t},e.children)},d="mdxType",c={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,s=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),d=u(n),m=a,h=d["".concat(s,".").concat(m)]||d[m]||c[m]||o;return n?r.createElement(h,i(i({ref:t},p),{},{components:n})):r.createElement(h,i({ref:t},p))}));function h(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,i=new Array(o);i[0]=m;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l[d]="string"==typeof e?e:a,i[1]=l;for(var u=2;u<o;u++)i[u]=n[u];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},6567:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>i,default:()=>c,frontMatter:()=>o,metadata:()=>l,toc:()=>u});var r=n(7462),a=(n(7294),n(3905));const o={},i="Querying data",l={unversionedId:"mongodb/querying",id:"mongodb/querying",title:"Querying data",description:'In the "Collections" view, you can see a list of databases and collections in the left sidebar. All the collections whose name starts with sample_ are sample data collections. You can query these collections to see how the data is structured.',source:"@site/docs/6-mongodb/3-querying.mdx",sourceDirName:"6-mongodb",slug:"/mongodb/querying",permalink:"/learn-to-mern-self-paced/docs/mongodb/querying",draft:!1,editUrl:"https://github.com/mongodb-developer/learn-to-mern-self-paced/blob/main/docs/6-mongodb/3-querying.mdx",tags:[],version:"current",sidebarPosition:3,frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Getting started",permalink:"/learn-to-mern-self-paced/docs/mongodb/getting-started"},next:{title:"Querying with code",permalink:"/learn-to-mern-self-paced/docs/mongodb/querying-in-code"}},s={},u=[{value:"Find a specific movie",id:"find-a-specific-movie",level:2},{value:"Find movies with a specific genre",id:"find-movies-with-a-specific-genre",level:2},{value:"Using operators in queries",id:"using-operators-in-queries",level:2},{value:"Multiple query parameters",id:"multiple-query-parameters",level:2},{value:"Projecting and sorting",id:"projecting-and-sorting",level:2}],p={toc:u},d="wrapper";function c(e){let{components:t,...n}=e;return(0,a.kt)(d,(0,r.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"querying-data"},"Querying data"),(0,a.kt)("p",null,'In the "Collections" view, you can see a list of databases and collections in the left sidebar. All the collections whose name starts with ',(0,a.kt)("inlineCode",{parentName:"p"},"sample_")," are sample data collections. You can query these collections to see how the data is structured."),(0,a.kt)("p",null,"Let's look a the ",(0,a.kt)("inlineCode",{parentName:"p"},"sample_mflix")," database. Click on the ",(0,a.kt)("inlineCode",{parentName:"p"},"sample_mflix")," database in the left sidebar. You should see a list of collections in the database. Click on the ",(0,a.kt)("inlineCode",{parentName:"p"},"movies")," collection. You should see a list of documents in the collection."),(0,a.kt)("p",null,"Explore the first document. You will notice that there is a number of key-value pairs representing the data about this movie. In addition to strings and numbers, you will also see arrays and sub-documents. Click on ",(0,a.kt)("inlineCode",{parentName:"p"},"genres")," to expand an array. You can also click on ",(0,a.kt)("inlineCode",{parentName:"p"},"awards")," to see an object."),(0,a.kt)("p",null,"In MongoDB, some relationships are represented as embedded objects or arrays. For example, the ",(0,a.kt)("inlineCode",{parentName:"p"},"genres")," array contains the names of genres that this movie belongs to. The ",(0,a.kt)("inlineCode",{parentName:"p"},"awards")," object contains the number of wins and nominations for this movie."),(0,a.kt)("h2",{id:"find-a-specific-movie"},"Find a specific movie"),(0,a.kt)("p",null,'Above the first document, you will notice a bar with the label "Filter". This is where you can enter a query to find a specific document. Let\'s find the movie "The Godfather".'),(0,a.kt)("p",null,"In that field, type:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-json"},'{ title: "The Godfather" }\n')),(0,a.kt)("p",null,'Then press the "Enter" key. You should see the document for "The Godfather" in the list. It should be the only returned document since we are looking for an exact match. If we wanted to return all "Godfather" movies, we could use a regular expression:'),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-json"},"{ title: /godfather/i }\n")),(0,a.kt)("p",null,"The ",(0,a.kt)("inlineCode",{parentName:"p"},"/godfather/i"),' is a regular expression that matches any string that contains the word "godfather" (case-insensitive).'),(0,a.kt)("h2",{id:"find-movies-with-a-specific-genre"},"Find movies with a specific genre"),(0,a.kt)("p",null,'You can also query array fields. Let\'s find all movies that are in the "Drama" genre. In the "Filter" field, type:'),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-json"},'{ genres: "Drama" }\n')),(0,a.kt)("p",null,"If you expand the ",(0,a.kt)("inlineCode",{parentName:"p"},"genres"),' field of the first document, you will see that the array contains "Drama". You can also see that the array contains other genres. This is because we are querying for any movie that has "Drama" as one of its genres.'),(0,a.kt)("p",null,'If you wanted to query for movies that are only in the "Drama" genre, you could use an array as your query parameter:'),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-json"},'{ genres: ["Drama"] }\n')),(0,a.kt)("h2",{id:"using-operators-in-queries"},"Using operators in queries"),(0,a.kt)("p",null,'You can also use operators in your queries. For example, let\'s find all movies that have a runtime of 180 minutes or more. In the "Filter" field, type:'),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-json"},"{ runtime: { $gte: 180 } }\n")),(0,a.kt)("p",null,"The ",(0,a.kt)("inlineCode",{parentName:"p"},"$gte"),' operator means "greater than or equal to". You can also use the ',(0,a.kt)("inlineCode",{parentName:"p"},"$gt"),' operator for "greater than", the ',(0,a.kt)("inlineCode",{parentName:"p"},"$lte"),' operator for "less than or equal to", and the ',(0,a.kt)("inlineCode",{parentName:"p"},"$lt"),' operator for "less than".'),(0,a.kt)("h2",{id:"multiple-query-parameters"},"Multiple query parameters"),(0,a.kt)("p",null,'You can also use multiple query parameters. For example, let\'s find all movies that are in the "Drama" genre and have a runtime of 180 minutes or more. In the "Filter" field, type:'),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-json"},'{ genres: "Drama", runtime: { $gte: 180 } }\n')),(0,a.kt)("p",null,"Using multiple properties in your query is the same as using the logical AND operator. You can also use the logical OR operator by using the ",(0,a.kt)("inlineCode",{parentName:"p"},"$or")," operator:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-json"},'{ $or: [ { genres: "Drama" }, { runtime: { $gte: 180 } } ] }\n')),(0,a.kt)("h2",{id:"projecting-and-sorting"},"Projecting and sorting"),(0,a.kt)("p",null,'If you click on the "More Options" button, you will see additional fields to project and sort your results. You can use these fields to limit the fields that are returned in your query results and to sort the results.'),(0,a.kt)("p",null,'If you want to return all movies that contain the word "godfather", but only the title and runtime fields, sorted by year in descending order, you could use the following query:'),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-json",metastring:'title="Filter"',title:'"Filter"'},"{ title: /godfather/i }\n")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-json",metastring:'title="Project"',title:'"Project"'},"{ title: 1, runtime: 1 }\n")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-json",metastring:'title="Sort"',title:'"Sort"'},"{ year: -1 }\n")),(0,a.kt)("p",null,"The ",(0,a.kt)("inlineCode",{parentName:"p"},"1")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"-1"),' values in the "Project" and "Sort" fields indicate whether the field should be included in the results (',(0,a.kt)("inlineCode",{parentName:"p"},"1"),") or excluded from the results (",(0,a.kt)("inlineCode",{parentName:"p"},"-1"),'). In the "Sort" field, the ',(0,a.kt)("inlineCode",{parentName:"p"},"1")," indicates ascending order and the ",(0,a.kt)("inlineCode",{parentName:"p"},"-1")," indicates descending order."))}c.isMDXComponent=!0}}]);