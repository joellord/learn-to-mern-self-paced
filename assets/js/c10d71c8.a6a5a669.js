"use strict";(self.webpackChunkswiftui_realm_app=self.webpackChunkswiftui_realm_app||[]).push([[2665],{3905:(e,t,n)=>{n.d(t,{Zo:()=>s,kt:()=>h});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var u=a.createContext({}),m=function(e){var t=a.useContext(u),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},s=function(e){var t=m(e.components);return a.createElement(u.Provider,{value:t},e.children)},d="mdxType",p={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},c=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,u=e.parentName,s=l(e,["components","mdxType","originalType","parentName"]),d=m(n),c=r,h=d["".concat(u,".").concat(c)]||d[c]||p[c]||o;return n?a.createElement(h,i(i({ref:t},s),{},{components:n})):a.createElement(h,i({ref:t},s))}));function h(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,i=new Array(o);i[0]=c;var l={};for(var u in t)hasOwnProperty.call(t,u)&&(l[u]=t[u]);l.originalType=e,l[d]="string"==typeof e?e:r,i[1]=l;for(var m=2;m<o;m++)i[m]=n[m];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}c.displayName="MDXCreateElement"},5585:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>u,contentTitle:()=>i,default:()=>p,frontMatter:()=>o,metadata:()=>l,toc:()=>m});var a=n(7462),r=(n(7294),n(3905));const o={},i="Using Forms",l={unversionedId:"advanced/form",id:"advanced/form",title:"Using Forms",description:"Are you ready to use forms in your application? Let's get started!",source:"@site/docs/9-advanced/3-form.mdx",sourceDirName:"9-advanced",slug:"/advanced/form",permalink:"/mern-workshop/docs/advanced/form",draft:!1,editUrl:"https://github.com/mongodb-developer/mern-workshop/blob/main/docs/9-advanced/3-form.mdx",tags:[],version:"current",sidebarPosition:3,frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Routing",permalink:"/mern-workshop/docs/advanced/router"},next:{title:"Solution",permalink:"/mern-workshop/docs/advanced/solution"}},u={},m=[{value:"Understanding forms in React",id:"understanding-forms-in-react",level:2},{value:"Submitting forms",id:"submitting-forms",level:2},{value:"Redirecting after submitting",id:"redirecting-after-submitting",level:2}],s={toc:m},d="wrapper";function p(e){let{components:t,...n}=e;return(0,r.kt)(d,(0,a.Z)({},s,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"using-forms"},"Using Forms"),(0,r.kt)("p",null,"Are you ready to use forms in your application? Let's get started!"),(0,r.kt)("h2",{id:"understanding-forms-in-react"},"Understanding forms in React"),(0,r.kt)("p",null,"Forms are a very important part of any web application. They allow users to input data and submit it. In React, working with and submitting forms is very similar to working with and submitting forms in HTML, but there are some key differences."),(0,r.kt)("p",null,"In order to read and write the value of a form element, you will need to set those as state variables in your component. Everytime the field changes, you will need to change the state variable."),(0,r.kt)("p",null,"This will be done in the ",(0,r.kt)("inlineCode",{parentName:"p"},"onChange")," event handler. The ",(0,r.kt)("inlineCode",{parentName:"p"},"onChange")," event handler will be called everytime the value of the input changes. The ",(0,r.kt)("inlineCode",{parentName:"p"},"onChange")," event handler will be passed an event object as an argument. The event object will have a property called ",(0,r.kt)("inlineCode",{parentName:"p"},"target")," which will have a property called ",(0,r.kt)("inlineCode",{parentName:"p"},"value")," which will be the value of the input."),(0,r.kt)("p",null,"Take a look at this example."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'function Form() {\n  const [name, setName] = React.useState(\'\');\n\n  function handleChange(event) {\n    setName(event.target.value);\n  }\n\n  return (\n    <form>\n      <label htmlFor="name">Name</label>\n      <input\n        id="name"\n        type="text"\n        value={name}\n        onChange={handleChange}\n      />\n      <div>Field value: {name}</div>\n    </form>\n  );\n}\n')),(0,r.kt)("h2",{id:"submitting-forms"},"Submitting forms"),(0,r.kt)("p",null,"You're almost there. You will now need to submit that form using an ",(0,r.kt)("inlineCode",{parentName:"p"},"onClick")," event handler. Once the event is triggered, you will need to send the data to your API. This will be done with the ",(0,r.kt)("inlineCode",{parentName:"p"},"fetch")," function."),(0,r.kt)("p",null,"Take a look at this example."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},"function Form() {\n  const [name, setName] = React.useState('');\n\n  function handleChange(event) {\n    setName(event.target.value);\n  }\n\n  function handleSubmit(event) {\n    event.preventDefault();\n    fetch('/api/items', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify({ name }),\n    });\n  }\n\n  return (\n    <form onSubmit={handleSubmit}>\n      <label htmlFor=\"name\">Name</label>\n      <input\n        id=\"name\"\n        type=\"text\"\n        value={name}\n        onChange={handleChange}\n      />\n      <button type=\"submit\">Submit</button>\n    </form>\n  );\n}\n")),(0,r.kt)("h2",{id:"redirecting-after-submitting"},"Redirecting after submitting"),(0,r.kt)("p",null,"You will now need to redirect the user to another page after submitting the form. This will be done with the ",(0,r.kt)("inlineCode",{parentName:"p"},"useNavigate")," hook. The ",(0,r.kt)("inlineCode",{parentName:"p"},"useNavigate")," hook will return a ",(0,r.kt)("inlineCode",{parentName:"p"},"navigate")," function that you can call to redirect the user to another page."),(0,r.kt)("p",null,"In the component function, add a call to ",(0,r.kt)("inlineCode",{parentName:"p"},"useNavigate")," to get the ",(0,r.kt)("inlineCode",{parentName:"p"},"navigate")," function. Then, in the ",(0,r.kt)("inlineCode",{parentName:"p"},"handleSubmit")," function, call the ",(0,r.kt)("inlineCode",{parentName:"p"},"navigate")," function to redirect the user to the home page."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx"},"function Form() {\n  const navigate = useNavigate();\n\n  function handleSubmit(event) {\n    // Send data to API\n    navigate('/');\n  }\n\n  return (\n    <form onSubmit={handleSubmit}>\n      <button type=\"submit\">Submit</button>\n    </form>\n  );\n}\n\n## Build your own form\n\nYou now have everything you need to build your own form. You will be building a form that allows users to submit a new  item. To do so, you will need the following.\n\n- Create a new route in `App.js` that renders a `NewItemForm` component.\n- Create a `NewItemForm` component that renders a form with the required fields.\n- In this form, use `useState` to create state variables for each field.\n- Create an `onChange` event handler for each field that updates the state variable.\n- Create an `onSubmit` event handler for the form that calls a function to submit the form.\n- Create a function that submits the form to your API.\n- Redirect the user to the home page after submitting the form.\n- Add a link to this new form from your home page.\n")))}p.isMDXComponent=!0}}]);