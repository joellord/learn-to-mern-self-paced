"use strict";(self.webpackChunkswiftui_realm_app=self.webpackChunkswiftui_realm_app||[]).push([[6405],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>b});var r=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function s(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?s(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):s(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},s=Object.keys(e);for(r=0;r<s.length;r++)n=s[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(r=0;r<s.length;r++)n=s[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var i=r.createContext({}),p=function(e){var t=r.useContext(i),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},c=function(e){var t=p(e.components);return r.createElement(i.Provider,{value:t},e.children)},u="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,s=e.originalType,i=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),u=p(n),m=o,b=u["".concat(i,".").concat(m)]||u[m]||d[m]||s;return n?r.createElement(b,a(a({ref:t},c),{},{components:n})):r.createElement(b,a({ref:t},c))}));function b(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var s=n.length,a=new Array(s);a[0]=m;var l={};for(var i in t)hasOwnProperty.call(t,i)&&(l[i]=t[i]);l.originalType=e,l[u]="string"==typeof e?e:o,a[1]=l;for(var p=2;p<s;p++)a[p]=n[p];return r.createElement.apply(null,a)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},2530:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>i,contentTitle:()=>a,default:()=>d,frontMatter:()=>s,metadata:()=>l,toc:()=>p});var r=n(7462),o=(n(7294),n(3905));const s={},a="Solutions",l={unversionedId:"mdb-express/solution",id:"mdb-express/solution",title:"Solutions",description:"Hopefully you've had a chance to try the exercises above. Here are my solutions.",source:"@site/docs/7-mdb-express/6-solution.mdx",sourceDirName:"7-mdb-express",slug:"/mdb-express/solution",permalink:"/learn-to-mern-self-paced/docs/mdb-express/solution",draft:!1,editUrl:"https://github.com/mongodb-developer/learn-to-mern-self-paced/blob/main/docs/7-mdb-express/6-solution.mdx",tags:[],version:"current",sidebarPosition:6,frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Get working!",permalink:"/learn-to-mern-self-paced/docs/mdb-express/get-working"},next:{title:"\ud83e\uddb8 Advanced - Clean up your code",permalink:"/learn-to-mern-self-paced/docs/mdb-express/cleaning-up"}},i={},p=[{value:"Full server code",id:"full-server-code",level:2}],c={toc:p},u="wrapper";function d(e){let{components:t,...n}=e;return(0,o.kt)(u,(0,r.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"solutions"},"Solutions"),(0,o.kt)("p",null,"Hopefully you've had a chance to try the exercises above. Here are my solutions."),(0,o.kt)("h2",{id:"full-server-code"},"Full server code"),(0,o.kt)("p",null,"You will need the ",(0,o.kt)("inlineCode",{parentName:"p"},"db.mjs")," file from the previous section. You can find it ",(0,o.kt)("a",{parentName:"p",href:"/learn-to-mern-self-paced/docs/mdb-express/connect-db"},"here"),"."),(0,o.kt)("details",null,(0,o.kt)("summary",null,"Click to expand"),(0,o.kt)("div",null,(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},'import express from "express";\nimport cors from "cors";\nimport db from "./utils/db.mjs";\nimport { ObjectId } from "mongodb";\n\nconst port = process.env.PORT || 5050;\nconst app = express();\napp.use(cors());\napp.use(express.json());\n\napp.get("/", (req, res) => {\n  const serverStatus = {\n    status: "running",\n    port: port,\n    timestamp: new Date().getTime(),\n    message: "Welcome to my book API"\n  };\n  res.json(serverStatus).status(200);\n});\n\napp.get("/books", async (req, res) => {\n  const books = await db.collection("books").find({}).toArray();\n  res.json(books).status(200);\n});\n\napp.get("/books/:id", async (req, res) => {\n  const book = await db.collection("books").findOne({ _id: new ObjectId(req.params.id) });\n  res.json(book).status(200);\n});\n\napp.post("/books", async (req, res) => {\n  let book = req.body;\n  console.log(book);\n  const result = await db.collection("books").insertOne(book);\n  res.json(result).status(201);\n});\n\napp.put("/books/:id", async (req, res) => {\n  let book = req.body;\n  const result = await db.collection("books").updateOne({ _id: new ObjectId(req.params.id) }, { $set: book });\n  res.json(result).status(200);\n});\n\napp.delete("/books/:id", async (req, res) => {\n  const result = await db.collection("books").deleteOne({ _id: new ObjectId(req.params.id) });\n  res.json(result).status(200);\n});\n\napp.listen(port, () => console.log(`Server running on port ${port}`));\n')))))}d.isMDXComponent=!0}}]);